import SwiftUI

struct TimerView: View {
    @AppStorage("elapsed_time") private var savedElapsedTime: Double = 0
    @AppStorage("is_running") private var savedIsRunning: Bool = false
    @AppStorage("background_date") private var savedBackgroundDate: Double = 0
    @AppStorage("start_date") private var savedStartDate: Double = 0
    
    @State private var elapsedTime: TimeInterval = 0
    @State private var timer: Timer?
    @State private var isRunning = false
    @State private var backgroundDate: Date?
    
    var body: some View {
        Spacer()
        ScrollView {
            Spacer()
            VStack(spacing: 20) {
                Spacer()
                HStack {
                    Button(action: {
                        elapsedTime -= 10.minTimeInterval
                    }) {
                        Image(systemName: "arrow.left")
                    }
                    .buttonStyle(BorderedButtonStyle())
                    
                    VStack {
                        Text(getStartDateAndTime())
                        Text(elapsedTime.timeString)
                            .font(.system(size: 50))
                            .monospacedDigit()
                    }
                    
                    
                    
                    Button(action: {
                        elapsedTime += 10.minTimeInterval
                    }) {
                        Image(systemName: "arrow.right")
                    }
                    .buttonStyle(BorderedButtonStyle())
                }
                
                HStack {
                    Text(stageString(from: elapsedTime))
                        .font(.system(size: 20))
                        .monospacedDigit()
                    
                    Image(systemName: stageImage(from: elapsedTime))
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .foregroundColor(stageColor(from: elapsedTime))
                        .frame(width: 20, height: 20)
                    
                    if timeStage(from: elapsedTime).startHour != 0 {
                        Text(timeStageString(from: elapsedTime))
                            .font(.system(size: 20))
                            .monospacedDigit()
                    }
                }
                
                buttonsView()
                
                Text(stageDescription(from: elapsedTime))
                    .font(.callout)
                    .padding()
                    .background(Color.green.opacity(0.1))
                    .cornerRadius(20)
                    .padding()
                
                if let extraDescription = stageExtraDescription(from: elapsedTime) {
                    HStack(spacing: 0) {
                        Text("üí°")
                            .padding(.leading)
                        
                        Text(extraDescription)
                            .font(.system(size: 16, weight: .bold))
                            .padding()
                        
                    }
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(20)
                    .padding()
                }
                
            }
        }
        .onAppear {
            setupNotifications()
            restoreState()
        }
    }
    
    private func getStartDateAndTime() -> String {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        let currentDate = Date()
        let startDate = currentDate.addingTimeInterval(-elapsedTime)
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd.MM.yyyy HH:mm"
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        dateFormatter.locale = Locale(identifier: "ru_RU")
        
        return dateFormatter.string(from: startDate)
    }
    
    @ViewBuilder
    private func buttonsView() -> some View {
        Button(action: {
            startTimer()
        }) {
            Text("–°—Ç–∞—Ä—Ç")
                .font(.title2)
                .frame(height: 50)
                .frame(maxWidth: .infinity)
                .background(isRunning ? Color.gray : Color.green)
                .foregroundColor(.white)
                .cornerRadius(10)
                .padding()
        }
        .disabled(isRunning)
        
        HStack(spacing: 8) {
            Button(action: {
                stopTimer()
            }) {
                Button(action: {
                    resetTimer()
                }) {
                    Text("–°–±—Ä–æ—Å")
                        .padding()
                        .font(.title2)
                        .frame(width: 100, height: 44)
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                
                Text("–°—Ç–æ–ø")
                    .font(.title2)
                    .frame(maxWidth: .infinity)
                    .frame(height: 44)
                    .background(!isRunning ? Color.gray : Color.red)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
        }.padding(.horizontal)
    }
    
    private func setupNotifications() {
        NotificationCenter.default.addObserver(
            forName: UIApplication.willResignActiveNotification,
            object: nil,
            queue: .main
        ) { _ in
            if isRunning {
                backgroundDate = Date()
                savedBackgroundDate = backgroundDate?.timeIntervalSince1970 ?? 0
                timer?.invalidate()
                timer = nil
            }
        }
        
        // –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω
        NotificationCenter.default.addObserver(
            forName: UIApplication.didBecomeActiveNotification,
            object: nil,
            queue: .main
        ) { _ in
            if isRunning {
                let savedDate = Date(timeIntervalSince1970: savedBackgroundDate)
                let timeInterval = Date().timeIntervalSince(savedDate)
                elapsedTime += timeInterval
                savedElapsedTime = elapsedTime
                startTimer()
            }
        }
    }
    
    private func restoreState() {
        elapsedTime = savedElapsedTime
        isRunning = savedIsRunning
        
        if isRunning {
            if savedBackgroundDate > 0 {
                let savedDate = Date(timeIntervalSince1970: savedBackgroundDate)
                let timeInterval = Date().timeIntervalSince(savedDate)
                elapsedTime += timeInterval
                savedElapsedTime = elapsedTime
            }
        }
    }
    
    private func startTimer() {
        isRunning = true
        savedIsRunning = true
        savedStartDate = Date().timeIntervalSince1970
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            elapsedTime += 1
            savedElapsedTime = elapsedTime
        }
    }
    
    private func stopTimer() {
        isRunning = false
        savedIsRunning = false
        timer?.invalidate()
        timer = nil
        backgroundDate = nil
        savedBackgroundDate = 0
    }
    
    private func resetTimer() {
        stopTimer()
        elapsedTime = 0
    }
    
    private func stageString(from timeInterval: TimeInterval) -> String {
        switch timeStage(from: timeInterval) {
        case .anabolic:
            return "Anabolic"
        case .catabolic:
            return "Catabolic"
        default:
            return "Fat Burning"
        }
    }
    
    private func stageImage(from timeInterval: TimeInterval) -> String {
        switch timeStage(from: timeInterval) {
        case .anabolic:
            return "wrench.fill"
        case .catabolic:
            return "bolt.fill"
        default:
            return "flame.fill"
        }
    }
    
    private func stageColor(from timeInterval: TimeInterval) -> Color {
        switch timeStage(from: timeInterval) {
        case .anabolic:
            return .yellow
        case .catabolic:
            return .orange
        default:
            return .red
        }
    }
    
    private func stageDescription(from timeInterval: TimeInterval) -> String {
        switch timeStage(from: timeInterval) {
        case .anabolic:
            return """
                üçΩÔ∏è –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è –∏ —É—Å–≤–æ–µ–Ω–∏—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
                ü©∏ –í –∫—Ä–æ–≤–∏ –ø–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –∏ –∏–Ω—Å—É–ª–∏–Ω–∞
                ‚ö° –û—Ä–≥–∞–Ω–∏–∑–º –∑–∞–ø–∞—Å–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –≤ –º—ã—à—Ü–∞—Ö –∏ –ø–µ—á–µ–Ω–∏ –≤ –≤–∏–¥–µ –≥–ª–∏–∫–æ–≥–µ–Ω–∞
                üèãÔ∏è –ò–∑–ª–∏—à–∫–∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ –∂–∏—Ä—ã
                üîÑ –ê–∫—Ç–∏–≤–Ω–æ –∏–¥—É—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞ —Ç–∫–∞–Ω–µ–π
                üí™ –≠—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –º–∞—Å—Å—É
                """
        case .catabolic:
            return """
                üìâ –£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –∏ –∏–Ω—Å—É–ª–∏–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è
                üîã –û—Ä–≥–∞–Ω–∏–∑–º –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø–∞—Å—ã –≥–ª–∏–∫–æ–≥–µ–Ω–∞
                ‚öñÔ∏è –ê–∫—Ç–∏–≤–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏—è
                üß™ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—é–∫–∞–≥–æ–Ω–∞ - –≥–æ—Ä–º–æ–Ω–∞, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏—é –≥–ª–∏–∫–æ–≥–µ–Ω–∞
                üîÑ –û—Ä–≥–∞–Ω–∏–∑–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–æ–≤—ã—Ö –∑–∞–ø–∞—Å–æ–≤
                üèÉ –í —ç—Ç–æ–π —Ñ–∞–∑–µ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                """
        default:
            return """
                üì™ –ó–∞–ø–∞—Å—ã –≥–ª–∏–∫–æ–≥–µ–Ω–∞ –∏—Å—Ç–æ—â–∞—é—Ç—Å—è
                üî• –û—Ä–≥–∞–Ω–∏–∑–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–æ–≤—ã—Ö –∑–∞–ø–∞—Å–æ–≤ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏
                ‚öóÔ∏è –ê–∫—Ç–∏–≤–Ω–æ –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–µ—Ç–æ–Ω–æ–≤—ã–µ —Ç–µ–ª–∞
                üìâ –°–Ω–∏–∂–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ –º–∏–Ω–∏–º—É–º–∞
                üßπ –ê–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã –∞—É—Ç–æ—Ñ–∞–≥–∏–∏ (–æ—á–∏—â–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫)
                üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–º–æ–Ω–∞ —Ä–æ—Å—Ç–∞
                ‚ú® –£–ª—É—á—à–∞–µ—Ç—Å—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–Ω—Å—É–ª–∏–Ω—É
                üî• –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ
                üí™ –≠—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∂–∏—Ä–æ—Å–∂–∏–≥–∞—é—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                """
        }
    }
    
    private func stageExtraDescription(from timeInterval: TimeInterval) -> String? {
        switch timeStage(from: timeInterval) {
        case .fatBurning12:
            return """
                    12 —á–∞—Å–æ–≤: –ø–æ–ª–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –≥–ª–∏–∫–æ–≥–µ–Ω–∞
                    """
        case .fatBurning16:
            return """
                    16-18 —á–∞—Å–æ–≤: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ
                    """
        case .fatBurning24:
            return """
                    24 —á–∞—Å–∞: –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –∞—É—Ç–æ—Ñ–∞–≥–∏–∏
                    """
        case .fatBurning36:
            return """
                    36-48 —á–∞—Å–æ–≤: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                    """
        default:
            return nil
        }
    }
    
    private func timeStage(from timeInterval: TimeInterval) -> TimeStage {
        let hours = Int(timeInterval) / 3600
        switch hours {
        case 0..<4:
            return .anabolic// hours
        case 4..<8:
            return .catabolic // timeInterval - 4 * 3600
        case 8..<12:
            return .fatBurning8  // hours - 8
        case 12..<16:
            return .fatBurning12  // hours - 12
        case 16..<24:
            return .fatBurning16  // hours - 16
        case 24..<36:
            return .fatBurning24  // hours - 24
        default:
            return .fatBurning36  // hours - 36
        }
    }
    
    private func timeStageString(from timeInterval: TimeInterval) -> String {
        let stage = timeStage(from: timeInterval)
        let interval = timeInterval - TimeInterval(stage.startHour * 3600)
        return interval.timeString
    }
}




extension Int {
    var minTimeInterval: TimeInterval {
        TimeInterval(self * 60)
    }
}
